/*************************************************************************      
DATE        VERSION       NAME REFERENCE      
2017-09-18  1.0.0   Autogenerated         WI#216104/WI#21702    
Initial Version    
2021-04-7  Dev/1.0.ExtendedBuckets   Amit WI#447667/WI#480429      
Changed for the Dynamic filters      
2021-04-13  Dev/1.0.ExtendedBuckets   Amit WI#447667/WI#480429      
Changed Transaction Date to Gaming Date    
2021-04-14  Dev/1.0.ExtendedBuckets   Amit WI#447667/WI#480429      
In place of displaying Transaction Property timezone, changed to display webapp property timezone     
based dates    
2021-04-14  Dev/1.0.ExtendedBuckets   Amit WI#447667/WI#480429      
Corrected Reason column source    
2021-04-22  Dev/1.0.ExtendedBuckets   Amit WI#447667/WI#484209        
Corrected Reason column source. Merged void and redeem transactions into single row.    
2021-04-29  Dev/1.0.ExtendedBuckets   Amit WI#447667/WI#485929        
Changes done to get the Dcomp balance from Log table.  
2021-05-27  Dev/1.0.ExtendedBuckets   Amit Sisodiya    WI#489911/WI#492360        
Changes done to get redeem amount by deducting issued amount. Also removed redeem outlet column.
2021-06-07  Dev/1.0.ExtendedBuckets   Amit Sisodiya    WI#489911/WI#492360        
Handled Redeemed amount.
2021-06-17  Dev/1.0.ExtendedBuckets   Anupam    WI#489911/WI#492360 
one check was pending, handled same in the code to Handled Redeemed amount.
2021-07-27     Dev/1.0.ExtendedBuckets       Rajat Garg        WI#488987/WI#476867
BucketID ALL filter and new function call
2021-08-07  Dev/1.0.ExtendedBuckets   ArshdeepSingh    WI#425159/WI#551196 
fixed issue of agregation. issued,voided and redeem amount were getting aggregated incorreclty
2021-08-17  Dev/1.0.ExtendedBuckets   Shekhar          WI#552548/WI#552763 
Redeemed amount of both Detail and Summary section in the report when user has just issued Dcomps.
2021-08-17  Dev/1.0.ExtendedBuckets   Indu Singh       WI#553570/WI#553740 
Removed all bucket settings other than DiscretionaryComp.
2021-09-20  Release/2.0.1000          Indu Singh       WI#548822/WI#559677
Removed all unnecessary joins and rewrote it.
2021-09-30  Release/2.0.1000          Indu Singh       WI#561452/WI#562739
Fixed ActualRedeemedAmount. If no redemption is made then let it be NULL and not mark as 0.0.
2021-09-30  Release/2.0.1000          Indu Singh       WI#561553/WI#562800
Fixed reason and username. These wont be for latest transaction but always for Issue transaction
2021-10-20  Release/2.0.1000          Rajat Garg       WI#562921/WI#565100
For Auto Redeemed Dcomps, issued amount values displayed as 0.
2021-10-25  Release/2.0.1000          Parag            WI#562756/WI#565777
Fix If Passing NonInteger Value in Parameter POS Check Number
2021-11-25    Release/2.0.1000        Deepak Dwij      WI#569453/TI#569464
Fixed OutletName when done 3rd Party
2021-11-29   Release/2.0.1000        Parag             WI#570500/WI#570535
Replace POSCheckNumber Column to DCompNumber
2021-12-02   Release/2.0.1000        Nikita Kapoor             WI#570547/WI#570941
Fixed Issuance/Redemption Amount will be shown as Positive.
2021-12-01   Release/2.0.1000   Himanshu Shekhar  WI#570672/WI#570979
Exclude expired transactions and its parent transactions from DComp transaction report
2021-12-20	Releases/2.0.1000		 Mukul M		  WI#572697/WI#572990
Added NOLOCK after EB.Transactions table in select statement.
2021-12-28   Release/2.0.1000   Nikita Kapoor  WI#573669/WI#573832
Fixed Actual Redemption amount column.
2022-01-04   Release/2.0.1000   Nikita Kapoor  WI#574246/WI#574287
Removed tExpired join as it is creating duplicate records
2022-02-04   Release/2.0.1000     Nikita Kapoor    WI#578262, 578274/WI#578428, 578429 
Fixed Item Description and Reason Column
**************************************************************************/

-- ==========================================================================================    
--  Version:      13.5.3700    
--  Author:       Unknown    
--  Create date:  1/1/1900        
--  Description:           
--  Report for Top 40 Achievers - HALoCOREDB     
--          
--  Tickets:       Last Modified By:   Date of Modification: Reason for Modification:           
--  NONE   Melissa Mendell  11/4/15     Creation of Comment Block        
--   NONE   Darryll P.   3/4/15     Use Correct Log Table to Show Comments     
--  #4654   Gary Monk   5/19/2016    Change reason to varchar(max)          
-- #7086   Pankaj Thakur  08/17/2016    Bind issued date from transactionDatetime       
-- #7360   Sachin Kumar    08/25/2016    Increased column Redeemed Date/Time, Redeemed Outlet, POS Check Number, Actual Redeemed Amount for Report changes    
-- #11243   Umakant Yadav  01/07/2017    Added IS NULL with @StartDate and @endDate    
--============================================================================================    

CREATE OR ALTER PROCEDURE dbo.usp_UC_RPT_DiscretionaryCompTransaction
  @BucketID nvarchar(MAX) = NULL, @PropertyID nvarchar(MAX) = NULL,
  @UniversalID nvarchar(MAX) = NULL, @UserId nvarchar(MAX) = NULL,
  @POSNumber nvarchar(MAX) = NULL, @Fromdate date, @ToDate date,
  @TZ nvarchar(8)
AS
BEGIN
  SET NOCOUNT ON;

  BEGIN TRY
    DECLARE @propertyList table (PropertyId bigint PRIMARY KEY);
    DECLARE @Player table (PlayerID bigint NOT NULL PRIMARY KEY);
    DECLARE @UserList table (UserId integer NOT NULL PRIMARY KEY);
    DECLARE @POSList table (POSNumber nvarchar(500) NOT NULL PRIMARY KEY);

    DECLARE @TimeZone nvarchar(64), @IssueInitiatorStatusID tinyint,
      @RedeemInitiatorStatusID tinyint, @VoidInitiatorStatusID tinyint,
      @ExpiredInitiatorStatusID tinyint, @OverRideTypeID tinyint;

    SELECT @IssueInitiatorStatusID = IIF(StatusDescription = 'Issue',
                                       TransactionInitiatorStatusID,
                                       @IssueInitiatorStatusID),
      @RedeemInitiatorStatusID = IIF(StatusDescription = 'Redeem',
                                   TransactionInitiatorStatusID,
                                   @RedeemInitiatorStatusID),
      @VoidInitiatorStatusID = IIF(StatusDescription = 'Void',
                                 TransactionInitiatorStatusID,
                                 @VoidInitiatorStatusID),
      @ExpiredInitiatorStatusID = IIF(StatusDescription = 'Expired',
                                    TransactionInitiatorStatusID,
                                    @ExpiredInitiatorStatusID)
    FROM dbo.TransactionInitiatorStatus;

    SELECT @OverRideTypeID = OverrideTypeId
    FROM dbo.UC_X_OverrideType
    WHERE OverrideType = 'Issue Comp';

    DECLARE @BucketViewList table
    (
      BucketViewID bigint NOT NULL PRIMARY KEY,
      PrimaryBucketViewID bigint NULL,
      BucketViewDisplayName nvarchar(512),
      CurrencySymbol nvarchar(3) NULL,
      DataPrecision tinyint NULL
    );

    IF @PropertyID IS NULL
    BEGIN
      INSERT @propertyList (PropertyId)
      SELECT p.PropertyID
      FROM dbo.UC_X_Property p
        INNER JOIN dbo.UC_X_Host h ON (p.PropertyID = h.PropertyID)
      WHERE p.Active = 1
        AND h.IsUniverse = 0;
    END;
    ELSE
    BEGIN
      INSERT INTO @propertyList (PropertyId)
      SELECT value FROM STRING_SPLIT(@PropertyID, ',');
    END;

    IF @UniversalID IS NOT NULL
    BEGIN
      INSERT INTO @Player (PlayerID)
      SELECT p.PlayerID
      FROM STRING_SPLIT(@UniversalID, ',') u
        INNER JOIN dbo.UC_PL_Player p ON p.UniversalPlayerID = u.value;
    END;

    INSERT INTO @UserList (UserId) SELECT value FROM STRING_SPLIT(@UserId, ',');

    INSERT INTO @POSList (POSNumber)
    SELECT value FROM STRING_SPLIT(@POSNumber, ',')WHERE ISNUMERIC(Value) = 1;

    INSERT INTO @BucketViewList
    (
      BucketViewID, PrimaryBucketViewID, BucketViewDisplayName, CurrencySymbol,
      DataPrecision
    )
    SELECT UBVFR.BucketViewID, UBVFR.PrimaryBucketViewID,
      bv.BucketViewDisplayName, c.Symbol, b.DataPrecision
    FROM dbo.udf_BucketViewsForReports(@BucketID, 'DiscretionaryComp') AS UBVFR
      INNER JOIN dbo.BucketViews bv ON UBVFR.PrimaryBucketViewID = bv.BucketViewID
      INNER JOIN dbo.BucketViewBuckets bvb ON UBVFR.PrimaryBucketViewID = bvb.BucketViewID
                                             AND bvb.IsPrimaryEarningBucket = 1
      INNER JOIN dbo.Buckets b ON b.BucketID = bvb.BucketID
      LEFT JOIN dbo.Currencies c ON b.CurrencyID = c.CurrencyID;

    SELECT @TimeZone = UXT.StandardName
    FROM dbo.UC_X_Timezones AS UXT
    WHERE UXT.StandardAbbreviation = @TZ
      OR UXT.DaylightAbbreviation = @TZ;

    IF @TimeZone IS NULL
      SELECT @TimeZone = UXP.TimeZone
      FROM dbo.UC_X_Property AS UXP
        INNER JOIN dbo.UC_X_Host h ON UXP.PropertyID = h.PropertyID
      WHERE h.IsUniverse = 1;

    SELECT MAX(P.PropertyName) AS Property,
      PL.UniversalPlayerID AS UniversalID, PL.LastName, PL.FirstName,
      MAX(dbo.fn_ConvertDTOToLocalDatetime(tcr.IssueDTO, @Timezone)) AS IssueDateTime,
      ABS(SUM( CASE
                 WHEN
                 (
                   TMP.ParentTransactionID = TMP.TransactionID
                   AND TMP.TransactionInitiatorStatusID = @RedeemInitiatorStatusID
                 ) THEN TMP.RedeemAmount
                 ELSE TMP.IssueAmount
               END
             )
         ) AS AmountIssued,
      MAX(TRY_CONVERT(money, lg.OriginalValue)) AS ProposedAmount,
      MAX(ot.OutletName) AS Outlet, MAX(c.CompName) AS ItemDescription,
      BL.BucketViewDisplayName AS Bucket,
      MIN(IIF(
            TMP.TransactionInitiatorStatusID IN (@IssueInitiatorStatusID,
                                                @RedeemInitiatorStatusID
                                                ),
            lg.Comments,
            NULL)
         ) AS Reason, MAX(tcr.CompNumber) AS POSCheckNumber,
      MIN(IIF(
            TMP.TransactionInitiatorStatusID IN (@IssueInitiatorStatusID,
                                                @RedeemInitiatorStatusID
                                                ),
            u.UserName,
            NULL)
         ) AS UserName, MAX(PR.PropertyName) AS IssuerProperty,
      MAX(dbo.fn_ConvertDTOToLocalDatetime(
                                          (pp.LastPlayedDate AT TIME ZONE pr.TimeZone),
                                          @TimeZone
                                          )
         ) AS LastPlayDateTime,
      MAX(IIF(TMP.TransactionInitiatorStatusID = @VoidInitiatorStatusID,
            dbo.fn_ConvertDTOToLocalDatetime(t.TransactionDTO, @Timezone),
            NULL)
         ) VoidedDateTime,
      MAX(
         IIF(T.TransactionInitiatorStatusID = @VoidInitiatorStatusID,
         u.UserName,
         NULL)
         ) AS VoidedUser,
      MAX(IIF(TMP.TransactionInitiatorStatusID = @RedeemInitiatorStatusID,
            dbo.fn_ConvertDTOToLocalDatetime(t.TransactionDTO, @Timezone),
            NULL)
         ) RedeemedDateTime, MAX(tcr.CompTransID) AS DCompNumber,
      ((ISNULL(SUM(TMP.IssueAmount), 0.0) + SUM(TMP.RedeemAmount)) * (-1))
      - ISNULL(SUM(tmp.VoidedAmount), 0) AS ActualRedeemedAmount, --Turns to NULL if no redemption is made(If NULL then mark it 0.0 is intentionally NOT handled)
      SUM(TMP.VoidedAmount) AS VoidedAmount,
      BL.CurrencySymbol AS CurrencySymbol, BL.DataPrecision,
      ISNULL(MAX(ot1.outletName), MAX(ot.OutletName)) RedeemedOutlet
    FROM
    (
      SELECT a.ParentTransactionID, a.TransactionID, a.IssueAmount,
        a.RedeemAmount, a.VoidedAmount, a.TransactionInitiatorStatusID
      FROM
      (
        SELECT ISNULL(t.ParentTransactionID, t.TransactionID) ParentTransactionID,
          ISNULL(tl.UsageTransactionID, t.TransactionID) TransactionID,
          ISNULL(
                  SUM(IIF(
                        t.TransactionInitiatorStatusID = @IssueInitiatorStatusID,
                        ISNULL(tl.BucketAmount, 0.0),
                        NULL)
                     ),
                  0
                ) IssueAmount,
          SUM(IIF(t.TransactionInitiatorStatusID = @RedeemInitiatorStatusID,
                ISNULL(tl.BucketAmount, 0),
                NULL)
             ) RedeemAmount,
          SUM(IIF(t.TransactionInitiatorStatusID = @VoidInitiatorStatusID,
                ISNULL(tl.BucketAmount, 0),
                NULL)
             ) VoidedAmount, t.TransactionInitiatorStatusID
        FROM EB.Transactions t WITH (NOLOCK)
          INNER JOIN @BucketViewList BL ON BL.BucketViewID = t.BucketViewID
          INNER JOIN dbo.PropertyGroupList pgl ON pgl.PropertyGroupID = t.PropertyGroupID
          INNER JOIN @propertyList PRL ON PRL.PropertyId = pgl.PropertyID
          LEFT JOIN EB.TransactionLedger tl WITH (NOLOCK) ON t.TransactionID = tl.UsageTransactionID
          LEFT JOIN @Player Pl ON Pl.PlayerID = t.PlayerID
        WHERE t.GamingDate >= @Fromdate
          AND t.GamingDate <= @ToDate
          AND (@UniversalID IS NULL OR Pl.PlayerID IS NOT NULL)
        GROUP BY ISNULL(t.ParentTransactionID, t.TransactionID),
          ISNULL(tl.UsageTransactionID, t.TransactionID),
          t.TransactionInitiatorStatusID
      ) a
      WHERE a.TransactionInitiatorStatusID <> @ExpiredInitiatorStatusID
    ) TMP
      INNER JOIN EB.Transactions T WITH (NOLOCK) ON TMP.TransactionID = T.TransactionID
      INNER JOIN @BucketViewList BL ON T.BucketViewID = BL.BucketViewID
      INNER JOIN dbo.UC_PL_Player PL WITH (NOLOCK) ON t.PlayerID = PL.PlayerID
      INNER JOIN dbo.PropertyGroupList pgl ON pgl.PropertyGroupID = t.PropertyGroupID
      INNER JOIN dbo.UC_X_Property p ON p.PropertyID = pgl.PropertyID
      INNER JOIN dbo.UC_X_Property pr ON t.TransactionPropertyID = pr.PropertyID
      INNER JOIN @propertyList PRL ON PRL.PropertyId = p.PropertyID
      INNER JOIN EB.TransactionCompReferences tcr WITH (NOLOCK) ON TMP.ParentTransactionID = tcr.TransactionID
      LEFT JOIN dbo.UC_X_UserLogin u ON T.UserID = u.UserID
      LEFT JOIN dbo.UC_X_CompItem c WITH (NOLOCK) ON c.CompItemID = tcr.CompItemID
      LEFT JOIN dbo.UC_X_Outlet ot WITH (NOLOCK) ON ot.OutletID = c.OutletID
      LEFT JOIN dbo.UC_L_OverrideLog lg WITH (NOLOCK) ON T.TransactionID = lg.TransactionID
                                                        AND T.PlayerID = lg.PlayerId
                                                        AND lg.OverrideTypeId = @OverRideTypeID
      LEFT JOIN @UserList Userlist ON u.UserID = Userlist.UserId
      LEFT JOIN @POSList posl ON tcr.CompTransID = posl.POSNumber
      LEFT JOIN EB.TransactionReferences tr WITH (NOLOCK) ON tr.TransactionID = t.TransactionID
                                                            AND tr.OutletID IS NOT NULL
      LEFT JOIN dbo.UC_X_Outlet ot1 ON ot1.OutletID = tr.OutletID
      OUTER APPLY
    (
      SELECT MAX(pp.LastPlayedDate) AS LastPlayedDate
      FROM dbo.UC_PL_PropPlay pp
      WHERE PL.PlayerID = pp.PlayerID
    ) pp
    WHERE (@UserId IS NULL OR u.UserID = Userlist.UserId)
      AND (@POSNumber IS NULL OR posl.POSNumber IS NOT NULL)
    GROUP BY T.PlayerID, T.BucketViewID, TMP.ParentTransactionID,
      PL.UniversalPlayerID, PL.LastName, PL.FirstName,
      BL.BucketViewDisplayName, BL.CurrencySymbol, BL.DataPrecision
    OPTION (RECOMPILE);
  END TRY
  BEGIN CATCH
    THROW;
  END CATCH;
END;
GO