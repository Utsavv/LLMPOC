/*********************************************************************************************************
DATE        VERSION             NAME                    REFERENCE
2017-09-18  1.0.0               Autogenerated           WI#216104/WI#21702
Initial Version
2018-01-02  Releases/1.0.1020   Shiva Goel              WI#240228/WI#240356
Formatted Version
2018-01-02  Releases/1.0.1020   Shiva Goel              WI#240228/WI#240356
Universal Player ID fix
2018-03-08  Releases/1.0.1020   Manik Garg              WI#255297
Merged changes from 3610 hotfixes.
2018-03-16  Releases/1.0.1020   Akanksha                WI#255297
Merged changes from 3610 hotfixes.
2018-03-20  Releases/1.0.1020   Shekhar                 WI#259479/WI#260068
GLI - Patron Balance Details report Defects ARI-4454
2018-03-20  Releases/1.0.1020   Shiva                   WI#259479/WI#263218
GLI - Patron Balance Details report Defects ARI-4454 - Fix report Issues and Before and After balance
2018-05-03  Releases/1.0.1020   Akanksha                WI#269562/TI#269924
Fixed previous balance in case of 'Void'
2018-05-07  Releases/1.0.1020   Akanksha                WI#269562/TI#269924
Fixed multiple issue - Using Gaming date instead of transaction date, previous balance, bucketdisplayname,'Void' status for points

2018-05-17  Releases/1.0.1020   Indu Singh              WI#272317/WI#272851
Formatted SP

2018-05-17  Releases/1.0.1020   Indu Singh              WI#272317/WI#272851
Added CompDetailHist to include all transactiontypes, added default @startdate 
and @enddate if null, added partition by playerid to avoid addition of balances
accross players, added PartialRedeemBalance to get amount to be added back to bucket 
balance, added calculation of AfterBalances in SP and removed from Report

2018-05-17  Releases/1.0.1020   Tony Patton             WI#272328
reverted query back to calendar datre (transactionDateTime) to overcome bigger issues found with GamingDate.

2018-05-18  Releases/1.0.1020   Indu Singh              WI#272328/WI#273094
Changed TransactionDate for Comps to TransactionDateTime as TransactionDate is comp issuance date
and TransactionDateTime is calendar date, Removed @StartDate and @EndDate Null filters
2018-05-21  Releases/1.0.1020   Shiva Goel              WI#272328/WI#273549
Filtered 0 Points award rows
2018-05-21  Releases/1.0.1020   Shiva Goel              WI#272328/WI#273549
Filtered all 0 amount rows

2018-06-23  MRDev\1.0.10xxGanymede    Dominic Villasin        WI#279642/277745
Added ExternalReward column for adjustment reward from external source.

2018-12-11  Dev\1.0.3800Parity  Himanshu                WI#305241/WI#310548
For Slot And Table earnings the TransactionName will appear as Slot Rating and Table Rating.
For Voided point ratings earlier transaction type was adjustment now it will be displayed as Rating Void.

2019-07-26  Hotfixes\1.0.1040   Indu Singh              WI#366330/WI#366331
Report changed to GamingDate using fn_GamingDateToStartTransactionDateTime to match other reports using gamingdate.
2020-02-07        Dev\1.1.OL1.3       Arun Gupta              WI#391074|WI#391406
Adding case statement to show correct trantype for kiosk redemption
2020-02-13        Dev\1.1.OL1.3       Arun Gupta              WI#391074|WI#395711
Adding '-' in 'Kiosk-Promotion' 

2020-02-18        Dev\1.1.OL1.3       Indu Singh              WI#395327|WI#396125
Fixed property display for Expired Records. Earlier Universe was being shown but respective property 
for which expiration happened must be shown.
2020-02-28        Dev\1.1.OL1.3       Arun Gupta              WI#396661|WI#397863
Adding column ExternalTransaction to show external machineid

2020-03-25        Dev\1.1.OL1.3       Himanshu Verma          WI#401431/TI#402993
consider expired amount from UCPL_PointExpiredProperty instead of UCPL_PointExpired

2020-04-03        Releases\1.3.1000   Nischay                 WI#401358/WI#404526
In Patron Balance Details Report, date filter was eariler working on UpdatedDate column
of dbo.UC_PL_CompDetail which was incorrect.
Now, it is working on dbo.UC_PL_CompDetailHist which is working fine

2020-05-08        Releases\1.3.1000   Rajan Kumar             WI#411858/WI#412305
Added Id column in temp tables for maintaining sequence of transactions

2020-09-03     Dev/1.1.OL1.4           Arun Gupta       WI#433581/WI#436522
Updating code to avoid Victim player data in output

2020-09-22          Dev/1.0.ExtendedBuckets    Himanshu Shekhar  WI#429425/TI#439076
Modified procedure and rewritten entire logic as per new transaction framework
2020-09-22          Dev/1.0.ExtendedBuckets    Himanshu Shekhar  WI#445080/TI#446111
Added new Transaction type 'Expired'
2020-12-01          Dev/1.0.ExtendedBuckets    Himanshu Shekhar  WI#453003/TI#454813
Modified procedure to show secondary BucketView transactions. Primary BV Name will be displayed on report
2020-12-23          Dev/1.0.ExtendedBuckets    Himanshu Shekhar  WI#456162/TI#460213
Removed transaction related to Bucket award redemption
2021-01-13          Dev/1.0.ExtendedBuckets    Deepak Dwij  WI#430102/TI#461208
Added new option 'Return'
2021-01-20          Dev/1.0.ExtendedBuckets    Jai          WI#429992/WI#465056 (BUG)
Added new option 'Rollover' for seeded balance adjustments
2021-01-25          Dev/1.0.ExtendedBuckets    Himanshu Shekhar   WI#466065/WI#466136 (BUG)
1.For NCEP In/CEPIn transaction Download will be vissible and for NCEP Out Upload
2.Deposit transaction type will be shown as Adjustment
2021-02-18   Dev/1.0.ExtendedBuckets    Himanshu Shekhar   WI#470974/WI#471486 (BUG)
Show Amount with data precision and currency symbol
2021-02-22    Dev/1.0.ExtendedBuckets    Himanshu Shekhar  WI#456162/TI#460213
Modified few logic related to removal of Bucket award redemption. Promo offer. 
Ealier changes were done on 23rd Dec
2021-04-05    Dev/1.0.ExtendedBuckets    Himanshu Shekhar  WI#458813/TI#478461
Added scenarios for Purging balance through Exclusion management
2021-04-22    Dev/1.0.ExtendedBuckets    Nikita Kapoor  WI#480666/TI#482646
Added Timezone check to get correct result.
2021-04-23    Dev/1.0.ExtendedBuckets    Nikita Kapoor  WI#480675/TI#485064
Changed join condition from TransactionTypeID to Name
2021-05-29    Dev/1.0.ExtendedBuckets    Shekahr        WI#491361/WI#491823
Optimization done for the report, Join and Date filter are changed for better performance
2021-06-17    Dev/1.0.ExtendedBuckets     Rajan Kumar    WI#489542/WI#490706
Considering TransactionInitiatorStatus table's value for Purge status instead of TransactionInitiators 
2021-07-06    Dev/1.0.ExtendedBuckets     Shekhar        WI#515037/WI#534629
Patron Balance Report New SP is taking too much time run
2021-08-03    Dev/1.0.ExtendedBuckets     Shekhar        WI#547084/WI#550438
Linked Player Balance not coming report
Balance consumption from Linked Player's bucket should be visible in the report and same as 1.4
2021-08-13    Dev/1.0.ExtendedBuckets     Shekhar        WI#551485/WI#552332
Reward Balance was not coming in report from Kiosk
2021-08-26  Dev/1.0.ExtendedBuckets     Nikita Kapoor   WI#491616/WI#554003
Change for @BucketViewList Table
2021-09-04  Releases/2.0.1000     Nikita         WI#534324/TI#557573
player beginning and ending balance while selecting future date
2021-09-07   Releases/2.0.1000  Nikita           WI#534324/WI#557580
Added previous changes comment
2021-10-06   Releases/2.0.1000  Shekhar          WI#563557/WI#563594
Date filters not working in case of PlayerID is passed
2021-10-11  Releases/2.0.1000     Nikita         WI#563233/TI#563803
Added BucketName column for selected future date
2021-10-22  Releases/2.0.1000     Parag         WI#565650/TI#565725
Remove the Null Transaction Id generated due to  incorrect UniversalID
2021-10-25  Release/2.0.1000      Indu          WI#548822/WI#566871
Rewrote entire SP. Added running balance bucket logic + bucketawards/offers logic  + promo universal/local
 calculation + < fromdate beginning balance logic for bucket and bucketawards/offers
 Void must appear with its related transaction even if void is not selected as transactiontype.
 Data must not duplicate if Void is selected along with related transactiontype
2021-11-02  Release/2.0.1000  Himanshu Shekhar  WI#567024/WI#567300
Fixed Rnum issue and remove duplicate rows
2021-11-08  Release/2.0.1000  Himanshu Shekhar  WI#567024/WI#567300
Removed Redeem & Expired from AllTransactionList to fix incorrect transaction amount issue
2021-11-08  Release/2.0.1000  Himanshu Shekhar  WI#567749/WI#567813
Show valid status for comp transactions
2021-11-12  Release/2.0.1000  Himanshu Shekhar  WI#567008/WI#568613
Remove extra datetime conversion logic for promo bucket
2021-11-17  Release/2.0.1000  Himanshu Shekhar  WI#568835/WI#569299
Adjustment transaction with Rollover initiator should be shown as "Rollover"
2021-11-17  Release/2.0.1000  Himanshu Shekhar  WI#568890/WI#569268
Show Purge as transaction types for Expired transactions with Purge as initiator
2021-11-23  Release/2.0.1000  Himanshu Shekhar  WI#569903/WI#569965
Show Deposit for Deposit Transaction types
2021-07-12  Release/2.0.1000      Nikita Kapoor        WI#571558/WI#571688
Fixed Transaction Type column.
2021-12-21  Release/2.0.1000            Nikita               WI#572021/WI#572498
Fixed displaying data in case of no transcation within date range
2021-12-21  Release/2.0.1000            Nikita               WI#572021/WI#572498
fixed transaction date datatype in #resultset
2021-12-27  Release/2.0.1000            Nikita               WI#573234/WI#573756
Fixed sequence of transaction.
2021-12-28  Release/2.0.1000            Parag                WI#573235/WI#573764
Fixed for the Redeemed transcation.
2022-01-27  Release/2.0.1000            Nikita              WI#577017/TI#577307
Fixed multi property issue by joining UC_X_Property with PropertyGroupList
2022-02-04  Release/2.0.1000            Pramil Gupta        WI#578314/TI#578355
Remove offset from @StartDate and @EndDate 
2022-02-17  Release/2.0.1000            Shekhar             WI#580334/WI#580341
Corrected Beginning Balance for the Transactions which consumed more than one Sources In Reports,
Fixed additional Scenarios
2022-04-21    Dev/2.0.OL15-0       Pramil Gupta     WI#584952/TI#589484
Added INSERT with column list
2022-06-17  Dev/2.0.OL15-0         Pramil Gupta     WI#596965/TI#596966
Fixed unqualified column name.
2022-10-17    Dev/2.0.OL15-0         Anoop K        WI#595962/TI#612300
Adding Recovered condition and removing unused variable (@DefaultCurrencySymbol) 
and Table(#MaxPropertyPlayerBalance)
2022-12-19    Dev/2.0.OL15-0         Anoop K        WI#620950/TI#621248 
Fixing before balance (universal promo) case for multi property
************************************************************************************************************/
CREATE OR ALTER PROCEDURE dbo.usp_UC_RPT_PatronBalanceDetails
(
  @UniversalPlayerID varchar(1024) = NULL, @StartDate date = NULL,
  @EndDate date = NULL, @PropertyIDs varchar(512) = NULL,
  @BucketViewIDs varchar(512) = NULL, @TransactionTypes varchar(512) = NULL,
  @TZ nvarchar(8) = NULL
)
AS
BEGIN
  SET NOCOUNT ON;

  BEGIN TRY
    DECLARE @Timezone nvarchar(64), 
      @tBucketViewPrimaryBucketView AS dbo.tBucketViewPrimaryBucketView,
      @tProperties AS dbo.tProperties, @tPlayerID AS dbo.tPlayerID,
      @PromoBucketViewID smallint, @BucketAwardInitiatorID smallint,
      @PromoOfferInitiatorID smallint, @SQL nvarchar(MAX),
      @IssueTransactionInitiatorStatusID tinyint,
      @VoidTransactionInitiatorStatusID tinyint, @IsVoidTransactionType bit,
      @ExpiredTransactionTypeID smallint,
      @RolloverTransactionInitiatorStatusID tinyint,
      @PurgeTransactionInitiatorStatusID tinyint,
      @RecoveredInitiatorStatusID tinyint, @PromoBucketViewName varchar(512);

    DECLARE @UniversalIDList TABLE (UniversalID varchar(12) PRIMARY KEY, PlayerID bigint NULL);

    DECLARE @TransactionTypeList table
    (
      TransactionTypeID bigint NOT NULL PRIMARY KEY,
      TransactionType varchar(32) NOT NULL
    );
    DECLARE @PropertyList TABLE (PropertyID bigint PRIMARY KEY);
    DECLARE @AllTransactionTypes table
    (
      TransactionTypeID bigint NOT NULL PRIMARY KEY,
      DisplayTransactiontype nvarchar(100) NOT NULL,
      TransactionType varchar(32) NOT NULL,
      Source varchar(30) NOT NULL
    );
    DECLARE @BucketViewList TABLE
    (
      BucketViewID bigint NOT NULL PRIMARY KEY,
      PrimaryBucketViewID bigint NOT NULL,
      BucketViewDisplayName nvarchar(256) NULL,
      IsComp bit NULL,
      CurrencySymbol nvarchar(3) NULL,
      DataPrecision tinyint NULL,
      BucketName nvarchar(256) NOT NULL,
      IsDefaultBucketView bit NULL,
      BucketType nvarchar(64) NOT null
    );

    SELECT @IssueTransactionInitiatorStatusID = IIF(StatusDescription = 'Issue',
                                                  TransactionInitiatorStatusID,
                                                  @IssueTransactionInitiatorStatusID),
      @VoidTransactionInitiatorStatusID = IIF(StatusDescription = 'Void',
                                            TransactionInitiatorStatusID,
                                            @VoidTransactionInitiatorStatusID),
      @RolloverTransactionInitiatorStatusID = IIF(
                                                StatusDescription = 'Rollover',
                                                TransactionInitiatorStatusID,
                                                @RolloverTransactionInitiatorStatusID),
      @PurgeTransactionInitiatorStatusID = IIF(StatusDescription = 'Purge',
                                             TransactionInitiatorStatusID,
                                             @PurgeTransactionInitiatorStatusID),
      @RecoveredInitiatorStatusID = IIF(StatusDescription = 'Recovered',
                                             TransactionInitiatorStatusID,
                                             @RecoveredInitiatorStatusID)
    FROM dbo.TransactionInitiatorStatus
    WHERE StatusDescription IN ('Issue', 'Void', 'Rollover', 'Purge', 'Recovered');

    SELECT @BucketAwardInitiatorID = IIF(Name = 'BucketAwards',
                                     TransactionInitiatorID,
                                     @BucketAwardInitiatorID),
      @PromoOfferInitiatorID = IIF(Name = 'PromoOffer',
                               TransactionInitiatorID,
                               @PromoOfferInitiatorID)
    FROM dbo.TransactionInitiators
    WHERE Name IN ('BucketAwards', 'PromoOffer');

    SELECT @ExpiredTransactionTypeID = TransactionTypeID
    FROM dbo.TransactionTypes
    WHERE name = 'Expired';

    DROP TABLE IF EXISTS #FinalMaxPropertyPlayerBalance;
    CREATE TABLE #FinalMaxPropertyPlayerBalance
    (
      PrimaryBucketViewID bigint NOT NULL,
      PlayerID bigint NOT NULL,
      PropertyID bigint NOT NULL,
      PropertyName varchar(50) NOT NULL,
      MaxPropertyBalance money NOT NULL
    );

    DROP TABLE IF EXISTS #FinalOfferAwardBalancesProperty;
    CREATE TABLE #FinalOfferAwardBalancesProperty
    (
      PrimaryBucketViewID int NOT NULL,
      PlayerID bigint NOT NULL,
      PropertyID bigint NOT NULL,
      RunningBalance money NULL PRIMARY KEY
                                (PrimaryBucketViewID, PlayerID, PropertyID)
    );

    CREATE TABLE #ResultSet
    (
      ID bigint NULL,
      PropertyName varchar(50) NULL,
      TransactionType nvarchar(32) NULL,
      TransactionDate datetime2 NULL,
      MachineID int NULL,
      BucketName nvarchar(256) NULL,
      TransAmount money NULL,
      PriorBalance money NULL,
      PlayerID char(12) NULL,
      AfterBalance money NULL,
      ExternalTransaction nvarchar(128) NULL,
      DataPrecision tinyint NULL,
      CurrencySymbol nvarchar(3) NULL,
      BucketType nvarchar(64) NULL,
      PrimaryBucketViewDisplayName nvarchar(256) NULL
    );

    SELECT @PromoBucketViewID = BV.BucketViewID
    FROM dbo.BucketSettings BS
      INNER JOIN dbo.BucketSettingsConfig BSC ON BSC.BucketSettingID = BS.BucketSettingID
      INNER JOIN dbo.BucketViewBuckets BVB ON BVB.BucketID = BS.BucketID
      INNER JOIN dbo.BucketViews BV ON BV.BucketViewID = BVB.BucketViewID
    WHERE BSC.SettingKey = 'IsFreePlay'
      AND BS.Value = 1;

    INSERT INTO @BucketViewList
    (
      BucketViewID, PrimaryBucketViewID, BucketViewDisplayName, CurrencySymbol,
      DataPrecision, BucketName, IsDefaultBucketView, BucketType
    )
    SELECT UBVFR.BucketViewID, UBVFR.PrimaryBucketViewID,
      bvp.BucketViewDisplayName, b1.Symbol, b1.DataPrecision, b.BucketName,
      bv.IsDefaultBucketView, bt.BucketTypeName
    FROM dbo.udf_BucketViewsForReports(
                                        @BucketViewIDs,
                                        'CompItems,IsTierPoints,IsFreePlay,DiscretionaryComp,IsRedeemableAtEGM,ConsolidatedBucket'
                                      ) AS UBVFR
      INNER JOIN dbo.BucketViewBuckets bvb ON UBVFR.BucketViewID = bvb.BucketViewID
                                             AND bvb.IsPrimaryEarningBucket = 1
      INNER JOIN dbo.BucketViews bv ON bvb.BucketViewID = bv.BucketViewID
      INNER JOIN dbo.BucketViews bvp ON bvp.BucketViewID = UBVFR.PrimaryBucketViewID
      INNER JOIN dbo.Buckets b ON b.BucketID = bvb.BucketID
      INNER JOIN dbo.BucketTypes bt ON bt.BucketTypeID = b.BucketTypeID
      CROSS APPLY
    (
      SELECT bkt.DataPrecision, c.Symbol
      FROM dbo.Buckets bkt
        INNER JOIN dbo.BucketViewBuckets bvb ON UBVFR.PrimaryBucketViewID = bvb.BucketViewID
                                               AND bvb.IsPrimaryEarningBucket = 1
        LEFT JOIN dbo.Currencies c ON bkt.CurrencyID = c.CurrencyID
      WHERE bkt.BucketID = bvb.BucketID
    ) b1;

    SELECT @PromoBucketViewName = BucketViewDisplayName 
    FROM @bucketviewList WHERE BucketName ='Universal Promo';

    INSERT @AllTransactionTypes (TransactionTypeID, DisplayTransactiontype,
                                TransactionType, Source
                                )
    SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) TransactionSourceID,
      DisplayTransactiontype, TransactionType, Source
    FROM
    (
      SELECT CASE
               WHEN Name IN ('NCEPIn', 'CEPIN') THEN 'Download'
               WHEN Name = 'NCEPOut' THEN 'Upload'
               ELSE Name
             END AS DisplayTransactiontype, Name AS TransactionType,
        'TransactionTypes' AS Source
      FROM dbo.TransactionTypes
      WHERE Name IN ('Adjustment', 'Redeem', 'Earning', 'NCEPIn', 'CEPIn',
                      'NCEPOut', 'Expired', 'Reward', 'Deposit'
                    )
      UNION ALL
      SELECT StatusDescription DisplayTransactiontype,
        StatusDescription TransactionType, 'InitiatorStatus' AS Source
      FROM dbo.TransactionInitiatorStatus
      WHERE StatusDescription IN ('Issue', 'Active', 'Void', 'Return',
                                 'Rollover', 'Purge'
                                 )
    ) a;

    IF (@TransactionTypes IS NOT NULL)
    BEGIN
      INSERT @TransactionTypeList (TransactionTypeID, TransactionType)
      SELECT att.TransactionTypeID, att.TransactionType
      FROM STRING_SPLIT(@TransactionTypes, ',') tt
        INNER JOIN @AllTransactionTypes att ON att.DisplayTransactiontype = tt.value;
    END;
    ELSE
    BEGIN
      INSERT @TransactionTypeList (TransactionTypeID, TransactionType)
      SELECT TransactionTypeID, TransactionType FROM @AllTransactionTypes;
    END;

    IF @UniversalPlayerID IS NOT NULL
    BEGIN
      INSERT INTO @UniversalIDList
      SELECT a.value, upp.playerid
      FROM STRING_SPLIT(@UniversalPlayerID, ',') a
        INNER JOIN dbo.UC_PL_Player upp WITH (NOLOCK) ON a.value = upp.UniversalPlayerID;
    END;

    IF @PropertyIDs IS NULL
    BEGIN
      INSERT INTO @PropertyList
      SELECT p.PropertyID FROM dbo.UC_X_Property p WHERE P.Active = 1;
    END;
    ELSE
    BEGIN
      INSERT INTO @PropertyList
      SELECT p.value
      FROM STRING_SPLIT(@PropertyIDs, ',') p
        INNER JOIN dbo.UC_X_Property pr ON CAST(p.value AS bigint) = pr.PropertyID
                                          AND pr.Active = 1;
    END;

    INSERT INTO @tBucketViewPrimaryBucketView (BucketViewID,
                                              PrimaryBucketViewID
                                              )
    SELECT BucketViewID, PrimaryBucketViewID FROM @BucketViewList;

    INSERT INTO @tProperties (PropertyID)
    SELECT PropertyID FROM @PropertyList
    UNION ALL
    SELECT H.PropertyID
    FROM dbo.UC_X_Property P
      INNER JOIN dbo.UC_X_Host H ON H.PropertyID = P.PropertyID
    WHERE H.IsUniverse = 1;

    IF (@UniversalPlayerID IS NOT NULL)
    BEGIN
      INSERT INTO @tPlayerID (PlayerID) SELECT PlayerID FROM @UniversalIDList;
    END;
    ELSE
    BEGIN
      INSERT INTO @tPlayerID
      SELECT DISTINCT T.PlayerID
      FROM EB.Transactions T WITH (NOLOCK)
        INNER JOIN dbo.TransactionTypes tt ON tt.TransactionTypeID = t.TransactionTypeID
        INNER JOIN @BucketViewList BVL ON BVL.BucketViewID = T.BucketViewID
        INNER JOIN @PropertyList PL ON PL.PropertyID = T.TransactionPropertyID
        LEFT JOIN @UniversalIDList UIL ON UIL.PlayerID = T.PlayerID
        LEFT JOIN dbo.TransactionInitiatorStatus TIS ON TIS.TransactionInitiatorStatusID = t.TransactionInitiatorStatusID
                                                       AND TIS.TransactionInitiatorStatusID IN (@IssueTransactionInitiatorStatusID,
                                                                                                 @VoidTransactionInitiatorStatusID,
                                                                                                 @RolloverTransactionInitiatorStatusID,
                                                                                                 @PurgeTransactionInitiatorStatusID
                                                                                               )
        INNER JOIN @TransactionTypeList ttl ON ttl.TransactionType = IIF(
                                                                       tis.TransactionInitiatorStatusID IS NOT NULL
                                                                          AND @IsVoidTransactionType = 1,
                                                                       tis.StatusDescription,
                                                                       tt.Name)
      WHERE T.GamingDate BETWEEN @StartDate AND @EndDate
        AND (@UniversalPlayerID IS NULL OR UIL.PlayerID = T.PlayerID);
    END;

    SELECT @TimeZone = UXT.StandardName
    FROM dbo.UC_X_Timezones AS uxt
    WHERE UXT.StandardAbbreviation = @TZ
      OR UXT.DaylightAbbreviation = @TZ;

    IF @TimeZone IS NULL
      SELECT @TimeZone = uxp.TimeZone
      FROM dbo.UC_X_Property AS uxp
        INNER JOIN dbo.uc_x_host uxh ON uxp.PropertyID = uxh.PropertyID
                                       AND uxh.isuniverse = 1;

    IF EXISTS (SELECT 1 FROM @tPlayerID)
    BEGIN
      EXEC dbo.isp_RunningBalancePropertyWithPlayer_sel @BucketViewList = @tBucketViewPrimaryBucketView,
        @PropertyList = @tProperties, @PlayerIDs = @tPlayerID,
        @FromDate = @StartDate, @UniversalID = -1,
        @BucketAwardInitiatorID = @BucketAwardInitiatorID,
        @PromoOfferInitiatorID = @PromoOfferInitiatorID;

      EXEC dbo.isp_RunningBalanceAwardOffer_sel @BucketViewList = @tBucketViewPrimaryBucketView,
        @BucketAwardInitiatorID = @BucketAwardInitiatorID,
        @PromoOfferInitiatorID = @PromoOfferInitiatorID,
        @PropertyList = @tProperties, @PlayerIDs = @tPlayerID,
        @TillDate = @StartDate, @UniversalID = -1;
    END;

    SET @SQL = 'CREATE NONCLUSTERED INDEX '
               + 'nc_FinalMaxPropertyPlayerBalance_'
               + CAST(REPLACE(NEWID(), '-', '_') AS varchar(64))
               + ' 
    ON #FinalMaxPropertyPlayerBalance(PlayerID,PrimaryBucketViewID,PropertyID) INCLUDE (MaxPropertyBalance)';

    EXECUTE sys.sp_executesql @Stmt = @SQL;
    SET @SQL = NULL;

    IF EXISTS (SELECT 1 FROM @BucketViewList WHERE BucketViewID = @PromoBucketViewID)
    BEGIN
      INSERT INTO #ResultSet
      (
        ID, PropertyName, TransactionType, TransactionDate, MachineID,
        BucketName, TransAmount, PriorBalance, PlayerID, AfterBalance,
        ExternalTransaction, DataPrecision, CurrencySymbol, BucketType,
        PrimaryBucketViewDisplayName
      )
      SELECT a.TransactionID AS ID, a.Property AS PropertyName,
        a.TransactionType, a.TransactionDateTime AS TransactionDate,
        a.MachineID, a.Bucket AS BucketName,
        ISNULL(AmountofTransaction, 0) AS TransAmount,
        BeginningBalance AS PriorBalance, a.UniversalPlayerID AS PlayerID,
        (BeginningBalance + ISNULL(AmountofTransaction, 0)) AS AfterBalance,
        a.ExternalTransaction, a.DataPrecision, a.CurrencySymbol, a.BucketType,
        a.PrimaryBucketViewDisplayName
      FROM
      (
        SELECT t.Bucket, t.PrimaryBucketViewDisplayName, t.Property,
          t.UniversalPlayerID,
          CASE
            WHEN t.TransactionType = 'Void' THEN 'Void'
            WHEN att.TransactionType = N'Redeem'
              AND t.TransactionInitiatorStatusID IS NOT NULL THEN
              tis.StatusDescription
            WHEN t.TransactionInitiatorStatusID = @VoidTransactionInitiatorStatusID THEN 'Void'
            WHEN t.TransactionInitiatorStatusID = @RecoveredInitiatorStatusID THEN 'Recovered'
            ELSE att.DisplayTransactiontype
          END TransactionType, t.TransactionDateTime,
          ISNULL(FOA.RunningBalance, 0.00) + ISNULL(F.MaxPropertyBalance, 0.00)
          + ISNULL(T.PromoRunningBalance, 0.0)
          + ISNULL(T.BeginningBalanceAward, 0.0) BeginningBalance,
          SUM(T.BucketAmount) OVER (PARTITION BY T.TransactionID, T.RNumLedger ORDER BY T.TransactionID) AmountofTransaction,
          t.TransactionID, t.CurrencySymbol, t.DataPrecision, t.MachineID,
          t.ExternalTransaction, T.BucketType,
          ROW_NUMBER() OVER (PARTITION BY T.TransactionID, T.RNumLedger
ORDER BY T.RNumLedger, T.LedgerID
                            ) RNum
        FROM
        (
          SELECT IIF(
                   t.BucketViewDisplayName <> t.BucketName
                      AND t.IsDefaultBucketView = 1,
                   t.BucketViewDisplayName + '- ' + t.BucketName,
                   t.BucketViewDisplayName) AS Bucket,
            t.BucketViewDisplayName AS PrimaryBucketViewDisplayName,
            pr.PropertyName Property, p.UniversalPlayerID,
            CONVERT(datetime2, tr.TransactionDTO AT TIME ZONE @TimeZone) TransactionDateTime,
            t.TransactionID, t.CurrencySymbol, t.DataPrecision,
            IIF(t.TransactionType IS NULL, 'No Activity', t.TransactionType) TransactionType,
            ISNULL(
                    SUM(IIF(
                          ISNULL(PGLU.PropertyGroupID, PGL.PropertyGroupID) = 0
                             AND pr.PBTPromoMethod = 'U'
                             AND ISNULL(
                                       TU.TransactionInitiatorID,
                                       TR.TransactionInitiatorID
                                       ) NOT IN (@BucketAwardInitiatorID,
                                                @PromoOfferInitiatorID
                                                ),
                          ISNULL(lu.BucketAmount, ls.BucketAmount),
                          0.0)
                       ) OVER (PARTITION BY TR.PlayerID, T.PrimaryBucketViewID
                               ORDER BY TR.TransactionDTO,PGL.PropertyGroupID, TR.TransactionID
                               ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                              ),
                    0.0
                  )
            + ISNULL(
                      SUM(IIF(
                            ISNULL(PGLU.PropertyGroupID, PGL.PropertyGroupID) <> 0
                               AND ISNULL(
                                         TU.TransactionInitiatorID,
                                         TR.TransactionInitiatorID
                                         ) NOT IN (@BucketAwardInitiatorID,
                                                  @PromoOfferInitiatorID
                                                  ),
                            ISNULL(lu.BucketAmount, ls.BucketAmount),
                            0.0)
                         ) OVER (PARTITION BY tr.PlayerID,
                                   T.PrimaryBucketViewID, t.EarnedPropertyID
                                 ORDER BY ISNULL(
                                                lu.TransactionLedgerID,
                                                ls.TransactionLedgerID
                                                ), TR.TransactionDTO,
                                   TR.TransactionID
                                 ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                                ),
                      0.0
                    ) AS PromoRunningBalance,
            SUM(IIF(
                  ISNULL(TU.TransactionInitiatorID, TR.TransactionInitiatorID) IN (
                                                                                  @BucketAwardInitiatorID,
                                                                                  @PromoOfferInitiatorID
                                                                                  ),
                  ISNULL(lu.BucketAmount, ls.BucketAmount),
                  0.00)
               ) OVER (PARTITION BY TR.PlayerID, T.PrimaryBucketViewID,
                         IIF(
                           ISNULL(
                                         TU.TransactionInitiatorID,
                                         TR.TransactionInitiatorID
                                         ) IN (@BucketAwardInitiatorID,
                                              @PromoOfferInitiatorID
                                              ),
                           ISNULL(PGLU.PropertyID, PGL.PropertyID),
                           TR.TransactionPropertyID)
                       ORDER BY ISNULL(
                                              lu.TransactionLedgerID,
                                              ls.TransactionLedgerID
                                              ), TR.TransactionDTO,
                         TR.TransactionID
                       ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                      ) BeginningBalanceAward,
            ROW_NUMBER() OVER (PARTITION BY TR.TransactionID,
                                 ISNULL(
                                       lu.TransactionLedgerID,
                                       ls.TransactionLedgerID
                                       )
                               ORDER BY IIF(
                                        ISNULL(PGLU.PropertyID, PGL.PropertyID) = TR.TransactionPropertyID,
                                        1,
                                        2)
                              ) RNumLedger, -- calculated to eliminate duplicate rows from usage's source propertygroup property
            ISNULL(lu.BucketAmount, ls.BucketAmount) BucketAmount, p.PlayerID,
            t.PrimaryBucketViewID, t.EarnedPropertyID, TR.MachineID,
            t.ExternalTransaction, T.BucketType,
            btt.Name AS VoidTransactionType, t.TransactionInitiatorStatusID,
            ISNULL(lu.TransactionLedgerID, ls.TransactionLedgerID) LedgerID
          FROM
          (
            SELECT t.TransactionID, bvl.PrimaryBucketViewID, t.GamingDate,
              t.TransactionPropertyID EarnedPropertyID, bvl.CurrencySymbol,
              bvl.DataPrecision, bvl.BucketViewDisplayName, bvl.BucketName,
              bvl.IsDefaultBucketView,
              CASE
                WHEN tt.Name = N'Expired'
                  AND t.TransactionInitiatorStatusID = @PurgeTransactionInitiatorStatusID THEN
                  'Purge'
                WHEN tt.Name = N'Adjustment'
                  AND t.TransactionInitiatorStatusID = @RolloverTransactionInitiatorStatusID THEN
                  'Rollover'
                ELSE tt.Name
              END AS TransactionType, tr.ExternalID ExternalTransaction,
              bvl.BucketType, t.TransactionInitiatorStatusID
            FROM EB.Transactions t WITH (NOLOCK)
              INNER JOIN dbo.TransactionTypes tt ON tt.TransactionTypeID = t.TransactionTypeID
              INNER JOIN @bucketviewList bvl ON t.BucketViewID = bvl.BucketViewID
              INNER JOIN @tPlayerID ul ON ul.PlayerID = t.PlayerID
              LEFT JOIN EB.TransactionReferences tr ON tr.TransactionID = t.TransactionID
            WHERE (t.GamingDate >= @StartDate AND t.GamingDate <= @EndDate)
          ) t
            INNER JOIN EB.Transactions TR WITH (NOLOCK) ON TR.TransactionID = t.TransactionID
            INNER JOIN dbo.PropertyGroupList PGL ON PGL.PropertyGroupID = TR.PropertyGroupID
            INNER JOIN dbo.UC_X_Property pr ON IIF(tr.PropertyGroupID = 0,
                                               tr.TransactionPropertyID,
                                               pgl.PropertyID) = pr.PropertyID
            INNER JOIN dbo.UC_PL_Player p ON TR.PlayerID = p.PlayerID
            LEFT JOIN EB.TransactionLedger ls WITH (NOLOCK) ON t.TransactionID = ls.SourceTransactionID
                                                              AND ls.UsageTransactionID IS NULL
            LEFT JOIN eb.TransactionLedger lu WITH (NOLOCK) ON t.TransactionID = lu.UsageTransactionID
            LEFT JOIN EB.Transactions TU WITH (NOLOCK) ON lu.SourceTransactionID = tu.TransactionID
            LEFT JOIN dbo.PropertyGroupList PGLU ON PGLU.PropertyGroupID = TU.PropertyGroupID
                                                   AND TR.TransactionTypeID <> @ExpiredTransactionTypeID
            LEFT JOIN EB.TransactionOfferReferences tor WITH (NOLOCK) ON t.transactionid = tor.TransactionID
                                                                        AND tor.TransactionID > 0
            LEFT JOIN dbo.TransactionTypes btt ON btt.TransactionTypeID = tu.TransactionTypeID
                                                 AND t.TransactionType = 'Void'
        ) T
          INNER JOIN @PropertyList PRL ON PRL.PropertyID = t.EarnedPropertyID
          LEFT JOIN @TransactionTypeList tt ON t.TransactionType = tt.Transactiontype
          LEFT JOIN @TransactionTypeList ttVoid ON t.VoidTransactionType = ttVoid.Transactiontype
          INNER JOIN @AllTransactionTypes att ON ISNULL(
                                                       tt.TransactionType,
                                                       ttVoid.TransactionType
                                                       ) = att.TransactionType
          LEFT JOIN dbo.TransactionInitiatorStatus tis ON tis.TransactionInitiatorStatusID = T.TransactionInitiatorStatusID
          LEFT JOIN #FinalMaxPropertyPlayerBalance F ON F.PlayerID = T.PlayerId
                                                       AND F.PrimaryBucketViewID = t.PrimaryBucketViewID
                                                       AND F.PropertyID = T.EarnedPropertyID
          LEFT JOIN #FinalOfferAwardBalancesProperty FOA ON FOA.PlayerID = T.PlayerID
                                                           AND FOA.PrimaryBucketViewID = t.PrimaryBucketViewID
                                                           AND FOA.PropertyID = T.EarnedPropertyID
        WHERE (tt.TransactionType IS NOT NULL OR ttVoid.TransactionType IS NOT NULL)
          AND T.RNumLedger = 1
      ) a
      WHERE a.RNum = 1
      OPTION (RECOMPILE);
    END;
    ELSE
    BEGIN
      DROP TABLE IF EXISTS #BalBef;
      CREATE TABLE #BalBef
      (
        BalBefID int IDENTITY(1, 1) PRIMARY KEY,
        MaxPropertyBalance money NULL,
        PlayerID bigint NOT NULL,
        PrimaryBucketViewID smallint NOT NULL
      );

      INSERT INTO #BalBef (PlayerID, PrimaryBucketViewID, MaxPropertyBalance)
      SELECT PlayerID, PrimaryBucketViewID, SUM(MaxPropertyBalance)
      FROM #FinalMaxPropertyPlayerBalance
      GROUP BY PlayerID, PrimaryBucketViewID;

      INSERT INTO #ResultSet
      (
        ID, PropertyName, TransactionType, TransactionDate, MachineID,
        BucketName, TransAmount, PriorBalance, PlayerID, AfterBalance,
        ExternalTransaction, DataPrecision, CurrencySymbol, BucketType,
        PrimaryBucketViewDisplayName
      )
      SELECT a.TransactionID AS ID, a.Property AS PropertyName,
        a.TransactionType, a.TransactionDateTime AS TransactionDate,
        a.MachineID, a.Bucket AS BucketName,
        ISNULL(a.AmountofTransaction, 0)
        + IIF(TransactionType = 'Redeem',
            IIF(ISNULL(a.AmountofTransaction, 0.0) >= 0,
              ISNULL(AmountIssued, 0.0),
              0.0),
            0.0) AS TransAmount, a.BeginningBalance AS PriorBalance,
        a.UniversalPlayerID AS PlayerID,
        (a.BeginningBalance + ISNULL(a.AmountofTransaction, 0)) AS AfterBalance,
        a.ExternalTransaction, a.DataPrecision, a.CurrencySymbol, a.BucketType,
        a.PrimaryBucketViewDisplayName
      FROM
      (
        SELECT t.Bucket, t.PrimaryBucketViewDisplayName, t.Property,
          t.UniversalPlayerID, t.TransactionDateTime,
          CASE
            WHEN t.TransactionType = 'Void' THEN 'Void'
            WHEN att.TransactionType = N'Redeem'
              AND t.TransactionInitiatorStatusID IS NOT NULL THEN
              tis.StatusDescription
            WHEN t.TransactionInitiatorStatusID = @VoidTransactionInitiatorStatusID THEN 'Void'
            WHEN t.TransactionInitiatorStatusID = @RecoveredInitiatorStatusID THEN 'Recovered'
            ELSE att.DisplayTransactiontype
          END TransactionType,
          ISNULL(FOA.RunningBalance, 0.00) + ISNULL(F.MaxPropertyBalance, 0.00)
          + ISNULL(T.RunningBeginningBalanceBucket, 0.0)
          + ISNULL(T.RunningBeginningBalanceAward, 0.0) AS BeginningBalance,
          SUM(T.BucketAmount) OVER (PARTITION BY T.TransactionID, T.RNumLedger ORDER BY T.TransactionID) AmountofTransaction,
          t.TransactionID, t.CurrencySymbol, t.DataPrecision, t.MachineID,
          t.ExternalTransaction, T.BucketType,
          ROW_NUMBER() OVER (PARTITION BY T.TransactionID, T.RNumLedger
ORDER BY T.RNumLedger, T.LedgerID
                            ) RNum, T.AmountIssued
        FROM
        (
          SELECT IIF(
                   t.BucketViewDisplayName <> t.BucketName
                      AND t.IsDefaultBucketView = 1,
                   t.BucketViewDisplayName + '- ' + t.BucketName,
                   t.BucketViewDisplayName) AS Bucket,
            t.BucketViewDisplayName AS PrimaryBucketViewDisplayName,
            pr.PropertyName Property, p.UniversalPlayerID,
            CONVERT(datetime2, tr.TransactionDTO AT TIME ZONE @TimeZone) TransactionDateTime,
            t.TransactionID, t.CurrencySymbol, t.DataPrecision,
            IIF(t.TransactionType IS NULL, 'No Activity', t.Transactiontype) TransactionType,
            SUM(IIF(
                  ISNULL(TU.TransactionInitiatorID, TR.TransactionInitiatorID) <> @BucketAwardInitiatorID,
                  ISNULL(lu.BucketAmount, ls.BucketAmount),
                  0.00)
               ) OVER (PARTITION BY TR.PlayerID, T.PrimaryBucketViewID
                       ORDER BY ISNULL(
                                              lu.TransactionLedgerID,
                                              ls.TransactionLedgerID
                                              ), TR.TransactionDTO,
                         TR.TransactionID
                       ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                      ) RunningBeginningBalanceBucket,
            SUM(IIF(
                  ISNULL(TU.TransactionInitiatorID, TR.TransactionInitiatorID) = @BucketAwardInitiatorID,
                  ISNULL(lu.BucketAmount, ls.BucketAmount),
                  0.00)
               ) OVER (PARTITION BY TR.PlayerID, T.PrimaryBucketViewID,
                         IIF(
                           ISNULL(
                                         TU.TransactionInitiatorID,
                                         TR.TransactionInitiatorID
                                         ) = @BucketAwardInitiatorID,
                           ISNULL(PGLU.PropertyID, PGL.PropertyID),
                           TR.TransactionPropertyID)
                       ORDER BY ISNULL(
                                              lu.TransactionLedgerID,
                                              ls.TransactionLedgerID
                                              ), TR.TransactionDTO,
                         TR.TransactionID
                       ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                      ) RunningBeginningBalanceAward,
            ROW_NUMBER() OVER (PARTITION BY TR.TransactionID,
                                 ISNULL(
                                       lu.TransactionLedgerID,
                                       ls.TransactionLedgerID
                                       )
                               ORDER BY IIF(
                                        ISNULL(PGLU.PropertyID, PGL.PropertyID) = TR.TransactionPropertyID,
                                        1,
                                        2)
                              ) RNumLedger, -- calculated to eliminate duplicate rows from usage's source propertygroup property            
            ISNULL(lu.BucketAmount, ls.BucketAmount) BucketAmount, p.PlayerID,
            t.PrimaryBucketViewID, t.EarnedPropertyID, TR.MachineID,
            t.ExternalTransaction, T.BucketType,
            btt.Name AS VoidTransactionType, t.TransactionInitiatorStatusID,
            ISNULL(tp.Amount, 0.0) AmountIssued,
            ISNULL(lu.TransactionLedgerID, ls.TransactionLedgerID) LedgerID
          FROM
          (
            SELECT t.TransactionID, bvl.PrimaryBucketViewID, t.GamingDate,
              t.TransactionPropertyID EarnedPropertyID, bvl.CurrencySymbol,
              bvl.DataPrecision, bvl.BucketViewDisplayName, bvl.BucketName,
              bvl.IsDefaultBucketView,
              CASE
                WHEN tt.Name = N'Expired'
                  AND t.TransactionInitiatorStatusID = @PurgeTransactionInitiatorStatusID THEN
                  'Purge'
                WHEN tt.Name = N'Adjustment'
                  AND t.TransactionInitiatorStatusID = @RolloverTransactionInitiatorStatusID THEN
                  'Rollover'
                ELSE tt.Name
              END AS TransactionType, tr.ExternalID ExternalTransaction,
              bvl.BucketType, tis.TransactionInitiatorStatusID
            FROM EB.Transactions t WITH (NOLOCK)
              INNER JOIN dbo.TransactionTypes tt ON tt.TransactionTypeID = t.TransactionTypeID
              INNER JOIN @bucketviewList bvl ON t.BucketViewID = bvl.BucketViewID
              INNER JOIN @tPlayerID ul ON ul.PlayerID = t.PlayerID
              LEFT JOIN EB.TransactionReferences tr ON tr.TransactionID = t.TransactionID
              LEFT JOIN dbo.TransactionInitiatorStatus tis ON tis.TransactionInitiatorStatusID = t.TransactionInitiatorStatusID
            WHERE (t.GamingDate >= @StartDate AND t.GamingDate <= @EndDate)
          ) t
            INNER JOIN EB.Transactions TR WITH (NOLOCK) ON TR.TransactionID = t.TransactionID
            INNER JOIN dbo.PropertyGroupList PGL ON PGL.PropertyGroupID = TR.PropertyGroupID
            INNER JOIN dbo.UC_X_Property pr ON pgl.PropertyID = pr.PropertyID
            INNER JOIN dbo.UC_PL_Player p ON TR.PlayerID = p.PlayerID
            LEFT JOIN EB.TransactionLedger ls WITH (NOLOCK) ON t.TransactionID = ls.SourceTransactionID
                                                              AND ls.UsageTransactionID IS NULL
            LEFT JOIN eb.TransactionLedger lu WITH (NOLOCK) ON t.TransactionID = lu.UsageTransactionID
            LEFT JOIN EB.Transactions TU WITH (NOLOCK) ON lu.SourceTransactionID = tu.TransactionID
            LEFT JOIN EB.Transactions tp WITH (NOLOCK) ON tp.TransactionID = TR.ParentTransactionID
            LEFT JOIN dbo.PropertyGroupList PGLU ON PGLU.PropertyGroupID = TU.PropertyGroupID
                                                   AND TR.TransactionTypeID <> @ExpiredTransactionTypeID
            LEFT JOIN dbo.TransactionTypes btt ON btt.TransactionTypeID = tu.TransactionTypeID
                                                 AND t.TransactionType = 'Void'
        ) T
          INNER JOIN @PropertyList PRL ON PRL.PropertyID = t.EarnedPropertyID
          LEFT JOIN @TransactionTypeList tt ON t.TransactionType = tt.Transactiontype
          LEFT JOIN @TransactionTypeList ttVoid ON t.VoidTransactionType = ttVoid.Transactiontype
          INNER JOIN @AllTransactionTypes att ON ISNULL(
                                                       tt.TransactionType,
                                                       ttVoid.TransactionType
                                                       ) = att.TransactionType
          LEFT JOIN dbo.TransactionInitiatorStatus tis ON tis.TransactionInitiatorStatusID = T.TransactionInitiatorStatusID
          LEFT JOIN #BalBef F ON F.PlayerID = T.PlayerId
                                AND F.PrimaryBucketViewID = t.PrimaryBucketViewID
          LEFT JOIN #FinalOfferAwardBalancesProperty FOA ON FOA.PlayerID = T.PlayerID
                                                           AND FOA.PrimaryBucketViewID = t.PrimaryBucketViewID
                                                           AND FOA.PropertyID = T.EarnedPropertyID
        WHERE (tt.TransactionType IS NOT NULL OR ttVoid.TransactionType IS NOT NULL)
          AND T.RNumLedger = 1
      ) a
      WHERE a.RNum = 1
      OPTION (RECOMPILE);
    END;
    IF EXISTS (SELECT 1 FROM #ResultSet)
    BEGIN
      IF EXISTS (SELECT 1 FROM #ResultSet WHERE TransactionType IN ('Purge','Recovered') AND PrimaryBucketViewDisplayName = @PromoBucketViewName)
      BEGIN 

        SELECT ID, PropertyName, TransactionType, TransactionDate, MachineID,
          BucketName, TransAmount, PriorBalance, PlayerID, AfterBalance,
          ExternalTransaction, DataPrecision, CurrencySymbol, BucketType,
          PrimaryBucketViewDisplayName
        FROM #ResultSet
          ORDER BY TransactionDate ASC,
            CASE  WHEN  TransactionType = 'Purge' THEN PriorBalance ELSE NULL END DESC ,
            CASE  WHEN  TransactionType = 'Recovered' THEN AfterBalance ELSE NULL END ASC

      END
      ELSE 
      BEGIN 
        SELECT ID, PropertyName, TransactionType, TransactionDate, MachineID,
            BucketName, TransAmount, PriorBalance, PlayerID, AfterBalance,
            ExternalTransaction, DataPrecision, CurrencySymbol, BucketType,
            PrimaryBucketViewDisplayName
         FROM #ResultSet
       END 
      END;

    ELSE
    BEGIN
      SELECT NULL ID, NULL PropertyName, NULL TransactionType,
        NULL AS TransactionDate, NULL MachineID,
        bv.BucketViewDisplayName AS BucketName, 0 TransAmount,
        (ISNULL(bbal.MaxPropertyBalance, 0) + ISNULL(FOA.RunningBalance, 0)) PriorBalance,
        p.UniversalPlayerID AS PlayerID,
        (ISNULL(bbal.MaxPropertyBalance, 0) + ISNULL(FOA.RunningBalance, 0)) AS AfterBalance,
        NULL ExternalTransaction, bv.DataPrecision, bv.CurrencySymbol,
        NULL BucketType, bv.BucketViewDisplayName
      FROM @UniversalIDList up
        INNER JOIN dbo.UC_PL_Player P WITH (NOLOCK) ON up.PlayerID = P.PlayerID
        LEFT JOIN dbo.UC_PL_DomProp dp WITH (NOLOCK) ON dp.PlayerID = P.PlayerID
        LEFT JOIN dbo.UC_X_Property dprop ON dp.DominantProperty = dprop.PropertyID
        CROSS APPLY
      (
        SELECT DISTINCT PrimaryBucketViewID, BucketViewDisplayName,
          CurrencySymbol, DataPrecision
        FROM @BucketViewList
      ) bv
        LEFT JOIN #FinalMaxPropertyPlayerBalance bbal ON P.PlayerID = bbal.PlayerID
                                                        AND bbal.PrimaryBucketViewID = bv.PrimaryBucketViewID
                                                        AND bbal.PropertyID = dp.DominantProperty
        FULL OUTER JOIN #FinalOfferAwardBalancesProperty FOA ON FOA.PlayerID = bbal.PlayerID
                                                               AND FOA.PrimaryBucketViewID = bbal.PrimaryBucketViewID
                                                               AND FOA.PropertyID = bbal.PropertyID;
    END;
  END TRY
  BEGIN CATCH
    THROW;
  END CATCH;
END;
GO